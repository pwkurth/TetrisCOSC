import java.awt.*;

public abstract class AbstractPiece implements Piece {

    //
    protected Square[] square;

    // whether the piece can be moved
    private boolean ableToMove;

    // the board this piece is on
    private Grid grid;

    // number of squares in one Tetris game piece
    private static final int PIECE_COUNT = 4;


    AbstractPiece(Grid g) {
        ableToMove = true;
        grid = g;
        square = new Square[PIECE_COUNT];
    }


    /**
     * Draws the piece on the given Graphics context
     */
    @Override
    public void draw(Graphics g) {
        for (int i = 0; i < PIECE_COUNT; i++) {
            square[i].draw(g);
        }
    }

    /**
     * Moves the piece if possible Freeze the piece if it cannot move down
     * anymore
     *
     * @param direction the direction to move
     */
    @Override
    public void move(Direction direction) {
        if (canMove(direction)) {
            for (int i = 0; i < PIECE_COUNT; i++)
                square[i].move(direction);
        }
        // if we couldn't move, see if because we're at the bottom
        else if (direction == Direction.DOWN) {
            ableToMove = false;
        }
    }

    /**
     * Returns the (row,col) grid coordinates occupied by this Piece
     *
     * @return an Array of (row,col) Points
     */
    public Point[] getLocations() {
        Point[] points = new Point[PIECE_COUNT];
        for (int i = 0; i < PIECE_COUNT; i++) {
            points[i] = new Point(square[i].getRow(), square[i].getCol());
        }
        return points;
    }

    /**
     * Return the color of this piece
     */
    @Override
    public Color getColor() {
        // all squares of this piece have the same color
        return square[0].getColor();
    }

    /**
     * Returns if this piece can move in the given direction
     */
    public boolean canMove(Direction direction) {
        if (!ableToMove)
            return false;

        // Each square must be able to move in that direction
        boolean answer = true;
        for (int i = 0; i < PIECE_COUNT; i++) {
            answer = answer && square[i].canMove(direction);
        }

        return answer;
    }


    /**
     * Rotate the Piece
     */
    @Override
    public void rotate() {
        int centerRow = square[1].getRow();
        int centerCol = square[1].getCol();

        boolean canRotate = true;

        for (Square s : square) {
            if (!s.canRotateAround(centerRow, centerCol)) {
                canRotate = false;
            }
        }
        if (canRotate) {
            for (Square s : square) {
                s.rotateAround(centerRow, centerCol);
            }
        }
    }
}
